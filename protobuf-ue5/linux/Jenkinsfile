#!/usr/bin/env groovy

import com.kingsoft.shiyou.UnrealEngineBuild

ueBuild = new UnrealEngineBuild(this, 'https://s3.shiyou.kingsoft.com')

SAFE_BRANCH_NAME = env.BRANCH_NAME ?: 'master'

pipeline {
    agent {
        label "os:linux && thirdparty"
    }
    options {
        skipDefaultCheckout()
    }
    parameters {
        string(name: 'PROTOBUF_UE5_VERSION', defaultValue: '3.19.4')
        string(name: 'MYCFLAGS', defaultValue: '')
        string(name: 'MYLDFLAGS', defaultValue: '')
        string(name: 'ENGINE_BRANCH', defaultValue: 'release')
        booleanParam(name: 'CLEAN_WS',
            defaultValue: false,
            description: 'When checked, call function cleanWs.')
    }
    environment {
        PROTOBUF_UE5_WORKSPACE           = "${env.WORKSPACE}"
        UE5_ROOT                         = "${env.WORKSPACE}/UnrealEngine"
        PROTOBUF_UE5_VERSION             = "${params.PROTOBUF_UE5_VERSION}"
        PROTOBUF_UE5_PREFIX              = "${env.HOME}/thirdparty/protobuf-UE5/${params.PROTOBUF_UE5_VERSION}/linux"
        PROTOBUF_UE5_ZIP                 = "protobuf-UE5-${params.PROTOBUF_UE5_VERSION}-linux.zip"
        UE5_CLANG_VERSION                = "v20_clang-13.0.1-centos7"
        UE5_ZLIB_VERSION                 = "v1.2.8"
        ENGINE_LOCAL_DIR                 = 'UnrealEngine'
        ENGINE_SYS                       = 'Linux'        
    }
    stages {
        stage('Cleanup') {
            steps {
                script {
                    if (params.CLEAN_WS) {
                        cleanWs()
                    }
                }
            }
        }

        stage('Checkout Out') {
            steps {
                checkout(scm: [
                    $class: 'GitSCM',
                    branches: [[name: SAFE_BRANCH_NAME]],
                    extensions: [[$class: 'CloneOption', shallow: true, depth: 1], [$class: 'SparseCheckoutPaths', sparseCheckoutPaths: [[path: 'protobuf-ue5']]]],
                    userRemoteConfigs: [[credentialsId: 'github', url: 'https://github.com/caichao1103/jenkins-pipeline-thirdparty.git']]
                ], changelog: false, poll: false)                
            }
        }

        stage('Git Engine') {
            steps {
                script {
                    def ue5CleanBuild = !fileExists(ENGINE_LOCAL_DIR)
                    if (ue5CleanBuild) {
                        dir(ENGINE_LOCAL_DIR) {
                            checkout(scm: [
                                $class: 'GitSCM',
                                branches: [[name: params.ENGINE_BRANCH]],
                                extensions: [[$class: 'CloneOption', timeout: 120], [$class: 'AuthorInChangelog']],
                                userRemoteConfigs: [[ url: 'https://github-mirror.shiyou.kingsoft.com/ffas-ue/UnrealEngine.git']]
                            ], poll: false, changelog: true)

                            ueBuild.ueSetup(ENGINE_SYS, '')
                        }
                    }
                }
            }
        }
        
        stage('Build') {
            steps {
                dir('protobuf-ue5/linux') {
                    withCMake('3.12.2') {
                        sh 'rm -rf *.zip'
                        sh './Build_Linux.sh'
                    }
                }
            }
        }

        stage('Archive') {
            steps {
                zip archive: true, dir: env.PROTOBUF_UE5_PREFIX, zipFile: env.PROTOBUF_UE5_ZIP
            }
        }
    }
    post {
        failure {
            archiveArtifacts artifacts: "protobuf-ue5/linux/protobuf-${params.PROTOBUF_UE5_VERSION}/config.log", allowEmptyArchive: true
        }
    }
}